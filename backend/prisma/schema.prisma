// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  username        String      @unique
  email           String      @unique
  password        String
  profile_picture String?
  bio             String?
  createdAt       DateTime    @default(now())
  role            UserRole    @default(USER)
  reviews         Review[]  
  ratings         Rating[]
  following       Follow[]   @relation("Follower")
  followers       Follow[]   @relation("Followers")
  genreVotes      GenreVote[]
  gameEditSubmissions GameEdit[]
}

enum UserRole {
  USER
  MOD
  ADMIN
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerID  Int
  followedID  Int
  createdAt   DateTime @default(now())

  follower    User     @relation("Follower", fields: [followerID], references: [id], onDelete: Cascade)
  followed    User     @relation("Followers", fields: [followedID], references: [id], onDelete: Cascade)

  @@unique([followerID, followedID])
}

model Game {
  id           Int          @id @default(autoincrement())
  title        String
  slug         String 
  releaseDate  DateTime
  coverImage   String
  developer    String
  avgRating    Float        @default(0.0)
  reviewCount  Int          @default(0)
  ratingCount  Int          @default(0)
  ratings      Rating[]
  reviews      Review[]
  genres       GameGenre[]
  genreVotes   GenreVote[]
  gameEditSubmissions GameEdit[]
  approved     Boolean
}

model GameEdit {
  id           Int      @id @default(autoincrement())
  gameID       Int
  title        String?  // optional fields to allow partial edits
  releaseDate  DateTime?
  coverImage   String?
  developer    String?
  submittedBy  Int
  createdAt    DateTime @default(now())
  game         Game     @relation(fields: [gameID], references: [id])
  user         User     @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
}

model Genre {
  id           Int      @id @default(autoincrement())
  genreName    String @unique
  slug         String
  parentGenre  Int?  
  subgenres    Genre[]  @relation("Subgenres")
  games        GameGenre[]
  votes        GenreVote[]
  parent       Genre?   @relation("Subgenres", fields: [parentGenre], references: [id])
}

model GameGenre {
  id           Int     @id @default(autoincrement())
  gameID       Int
  genreID      Int
  upvoteCount  Int     @default(0)
  downvoteCount Int    @default(0)
  totalVotes   Int     @default(0)

  game         Game   @relation(fields: [gameID], references: [id])
  genre        Genre  @relation(fields: [genreID], references: [id])

  @@unique([gameID, genreID])
}

model GenreVote {
  id        Int      @id @default(autoincrement())
  userID    Int
  gameID    Int
  genreID   Int
  voteValue Boolean

  user      User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  game      Game   @relation(fields: [gameID], references: [id])
  genre     Genre  @relation(fields: [genreID], references: [id])

  @@unique([userID, gameID, genreID])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userID    Int
  gameID    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  game      Game   @relation(fields: [gameID], references: [id])
  review    Review?  // One-to-one relation to Review 
  @@unique([userID, gameID])
}

model Review {
  id         Int      @id @default(autoincrement())
  userID     Int
  gameID     Int
  ratingID   Int @unique
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  game       Game    @relation(fields: [gameID], references: [id])
  rating     Rating  @relation(fields: [ratingID], references: [id]) 
  @@unique([userID, gameID])
}

